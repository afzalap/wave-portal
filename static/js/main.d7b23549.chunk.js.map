{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","message","setMessage","allWaves","setAllWaves","contractABI","abi","getAllWaves","a","async","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","console","log","on","from","prevState","useEffect","request","method","accounts","length","account","checkIfWalletIsConnected","className","label","placeholder","value","onChange","e","target","onClick","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","map","index","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7b23549.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport './App.css';\r\nimport abi from './utils/WavePortal.json';\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  \r\n  const contractAddress = \"0x7235399370D68a14A5A0BCE6C2855B0427a1f088\";\r\n  const contractABI = abi.abi;\r\n  \r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        getAllWaves();\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]); \r\n      getAllWaves();\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        let wavesCleaned = [];\r\n        waves.forEach(wave => {\r\n          wavesCleaned.push({\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message\r\n          });\r\n        });\r\n\r\n        setAllWaves(wavesCleaned);\r\n        console.log(\"Setting event listener\")\r\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\r\n          console.log(\"NewWave\", from, timestamp, message);\r\n\r\n          setAllWaves(prevState => [...prevState, {\r\n            address: from,\r\n            timestamp: new Date(timestamp * 1000),\r\n            message: message\r\n          }]);\r\n        });\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\nconst wave = async () => {\r\n    if(!currentAccount){\r\n      alert(\"Connect your MetaMask wallet to continue!\");\r\n      return;\r\n    }\r\n    \r\n    if(!message){\r\n      alert(\"Enter message to continue!\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        console.log(\"hello from line 114\");\r\n        console.log(message);\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n        console.log(\"hello from line 117\");\r\n\r\n      \r\n        const waveTxn = await wavePortalContract.wave(message, { gasLimit: 300000 });\r\n\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n        setMessage(\"\");\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        alert(\"Ethereum object doesn't exist! Please setup your Ethereum wallet, such as MetaMask to continue!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"mainContainer\">\r\n   \r\n      <div className=\"dataContainer\">\r\n      \r\n        <div className=\"header\">\r\n        ðŸ‘‹ Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am Afzal. I am learning Web3. Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n\r\n        <input label=\"Message\" placeholder=\"Enter your message here, it'll be stored on the blockchain ;)\" value={message} onChange={e=>setMessage(e.target.value)} />\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div key={index} className=\"msglist\">\r\n              <div>Message: {wave.message}</div>\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n            </div>)\r\n        })}     \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}